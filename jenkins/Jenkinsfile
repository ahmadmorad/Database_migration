pipeline {
    agent any

    environment {
        FLYWAY_VERSION = '8.5.0'
        DB_NAME = 'mydb'
        DB_USER = 'postgres'
        DB_PASS = 'password'
        NETWORK = "${env.JOB_NAME}-network"
    }

    stages {
        stage('Start PostgreSQL') {
            steps {
                sh '''
                echo "üêò Starte PostgreSQL-Container..."
                docker network create ${NETWORK} || true
                docker run -d \
                    --name pg_test \
                    --network ${NETWORK} \
                    -e POSTGRES_DB=$DB_NAME \
                    -e POSTGRES_USER=$DB_USER \
                    -e POSTGRES_PASSWORD=$DB_PASS \
                    -p 5433:5432 \
                    postgres:13

                echo "‚è≥ Warte auf PostgreSQL..."
                for i in {1..10}; do
                  docker exec pg_test pg_isready -U $DB_USER && break
                  sleep 2
                done
                '''
            }
        }

        stage('Run Flyway Migration') {
            steps {
                sh '''
                echo "üöÄ Starte Flyway-Migration..."
                docker run --rm \
                    --network ${NETWORK} \
                    -v $WORKSPACE/src/main/resources/db/migration:/flyway/sql \
                    -e FLYWAY_URL=jdbc:postgresql://pg_test:5432/$DB_NAME \
                    -e FLYWAY_USER=$DB_USER \
                    -e FLYWAY_PASSWORD=$DB_PASS \
                    flyway/flyway:$FLYWAY_VERSION migrate
                '''
            }
        }

        stage('Show Flyway History') {
            steps {
                sh '''
                echo "üìú Flyway Schema History:"
                docker exec -i pg_test psql -U $DB_USER -d $DB_NAME -c "SELECT version, description, success, installed_on FROM flyway_schema_history ORDER BY installed_rank;"
                '''
            }
        }
    }

    post {
        always {
            echo 'üßπ R√§ume auf...'
            sh '''
            docker rm -f pg_test || true
            docker network rm ${NETWORK} || true
            '''
        }
    }
}
